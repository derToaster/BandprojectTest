package com.example.Bandproject.controllers;

import com.example.Bandproject.models.User;
import com.example.Bandproject.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.logging.Logger;

@Service
@RestController // This means that this class is a Controller
@RequestMapping(path="/registration") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String firstName,
                                   @RequestParam String lastName,
                                   @RequestParam String username,
                                   @RequestParam String password,
                                   @RequestParam String instrument,
                                   @RequestParam String role) {

        User n = new User();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setUsername(username);
        n.setPassword(passwordEncoder.encode(password));
        n.setInstrument(instrument);
        n.setRole(role);
        n.setEnabled(true);
        userRepository.save(n);
        ModelAndView modelAndView = new ModelAndView("Success");
        return username + " Saved!";
    }
    @GetMapping
    public ModelAndView regitrationPage(){
        ModelAndView modelAndView = new ModelAndView("registration");
        return modelAndView;
    }

    @GetMapping("/getUser")
    public @ResponseBody User getCertainUser (String username){
        if (userRepository.findByUsername(username) == null){

            throw new UsernameNotFoundException("Username" + username + " does not exist");
        }
        return userRepository.findByUsername(username);

    }



    @DeleteMapping
    public @ResponseBody String deleteUserByUsername(String username){

        System.out.println("DELETE");

        if (userRepository.findByUsername(username) == null){

            throw new UsernameNotFoundException("Username" + username + " does not exist");
        }

        userRepository.delete(userRepository.findByUsername(username));
        return "deleted";
    }

    @PutMapping
    public @ResponseBody String updateUserFirstname(String username,String firstName){
        System.out.println("username" + username + " firstName" + firstName);

        System.out.println("PUT");
        if (userRepository.findByUsername(username) == null){

            throw new UsernameNotFoundException("Username" + username + " does not exist");
        }
        User updatedUser=  userRepository.findByUsername(username);
        updatedUser.setFirstName(firstName);
        userRepository.save(updatedUser);

        return "updated";

    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

     
}